# name: Frappe CI

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# jobs:
#   test:
#     runs-on: ubuntu-22.04
    
#     strategy:
#       matrix:
#         python-version: [3.8, 3.9, "3.10"]
        
#     services:
#       mysql:
#         image: mysql:8.0
#         env:
#           MYSQL_ROOT_PASSWORD: root
#         options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#         ports:
#           - 3306:3306
          
#       redis:
#         image: redis:alpine
#         options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
#         ports:
#           - 6379:6379

#     steps:
#     - uses: actions/checkout@v3
    
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v4
#       with:
#         python-version: ${{ matrix.python-version }}
        
#     - name: Set up Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: '16'
        
#     - name: Cache pip dependencies
#       uses: actions/cache@v3
#       with:
#         path: ~/.cache/pip
#         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#         restore-keys: |
#           ${{ runner.os }}-pip-
          
#     - name: Install system dependencies
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y \
#           git build-essential python3-setuptools python3-dev \
#           libffi-dev python3-pip libssl-dev libtiff5-dev \
#           redis-tools
          
#     - name: Install bench
#       run: |
#         pip3 install frappe-bench
    
#     - name: version
#       run: | 
#         bench --version
        
#     - name: Initialize bench
#       run: |
#         bench init frappe-bench --frappe-branch version-15
#         cd frappe-bench
        
#     - name: Create test site
#       run: |
#         cd frappe-bench
#         bench new-site test_site --admin-password admin --db-root-password root
#         bench --site test_site install-app frappe
        
#     - name: Install custom app (if exists)
#       run: |
#         cd frappe-bench
#         if [ -d "../frappe-app-example" ]; then
#           bench get-app ../frappe-app-example
#           bench --site test_site install-app frappe_app_example
#         fi
        
#     - name: Run tests
#       run: |
#         cd frappe-bench
#         bench --site test_site run-tests --coverage
        
#     - name: Code quality checks
#       run: |
#         cd frappe-bench
#         # Run linting on custom apps
#         if [ -d "apps/frappe_app_example" ]; then
#           cd apps/frappe_app_example
#           python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#           python -m flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
#         fi 



name: CI

on:
    push:
      branches: [ main, develop ]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    name: Server

    services:
      redis-cache:
        image: redis:alpine
        ports:
          - 13000:6379
      redis-queue:
        image: redis:alpine
        ports:
          - 11000:6379
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mariadb-admin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Find tests
        run: |
          echo "Finding tests"
          grep -rn "def test" > /dev/null

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt', '**/pyproject.toml', '**/setup.py', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: 'echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT'

      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install MariaDB Client
        run: |
          sudo apt update
          sudo apt-get install mariadb-client

      # - name: Setup
      #   run: |
      #     pip install frappe-bench
      #     bench init --skip-redis-config-generation --skip-assets --python "$(which python)" ~/frappe-bench
      #     mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL character_set_server = 'utf8mb4'"
      #     mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL collation_server = 'utf8mb4_unicode_ci'"
      - name: Setup Frappe Bench
        run: |
          sudo apt-get install redis-server
          sudo apt-get install mariadb-server
          sudo apt-get install python3-pip
          sudo apt-get install python3-venv
          sudo apt-get install -y nodejs
          sudo apt-get install yarn
      - name: setup frappe
        run: |
          sudo -H pip3 install frappe-bench
          bench init frappe-bench --frappe-branch version-15 --python python3
          cd frappe-bench/
          bench new-site --db-root-password root --admin-password admin test_site
          bench use test_site
        
      - name: Install
        run: |
          bench start
          bench build
        env:
          CI: 'Yes'

      # - name: Run Tests
      #   working-directory: /home/runner/frappe-bench
      #   run: |
      #     bench --site test_site set-config allow_tests true
      #     bench --site test_site run-tests --app cn_todo_manager
      #   env:
      #     TYPE: server

      - name: Install Playwright Deps
        working-directory: /home/runner/frappe-bench/apps/cn_todo_manager
        run: |
          yarn install
          yarn playwright install --with-deps

      # - name: Start Frappe Server
      #   working-directory: /home/runner/frappe-bench
      #   run: |
      #      bench start

      - name: Run Playwright Tests
        working-directory: /home/runner/frappe-bench/apps/cn_todo_manager
        run: |
          yarn playwright test
        env:
          baseURL: 'http://127.0.0.1:8000'
          headless: true

